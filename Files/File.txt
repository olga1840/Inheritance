<!DOCTYPE html>
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">







<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Oswald:wght@400&family=Roboto+Condensed:wght@400;700&family=Inconsolata:wght@400&family=Roboto:ital,wght@0,400;0,700;1,700&display=swap" rel="stylesheet">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v3.3.4/site.css">
<script src="/v3.3.4/main.js" type="text/javascript"></script>
<script type="text/javascript">
	(function(){
		var bsa_optimize=document.createElement('script');
		bsa_optimize.type='text/javascript';
		bsa_optimize.async=true;
		bsa_optimize.src='https://cdn4.buysellads.net/pub/cplusplus.js?'+(new Date()-new Date()%600000);
		(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(bsa_optimize);
	})();
</script>
</head>

<body>
<div id="I_container">
<div id="I_top">
<div id="I_header">

<div id="I_logo"><a href="/">
<div id="I_icon" title="C++"></div>
<div id="I_site" title="cplusplus.com">
<svg xmlns='http://www.w3.org/2000/svg' style='fill:#fff' viewBox='0 0 120 36'><text x='0' y='22' textLength='120' lengthAdjust='spacingAndGlyphs' font-family='Roboto,sans-serif' font-size='22px' font-style='italic' font-weight='bold' style='fill:#fff'>cplusplus</text><text id='tld' x='80' y='34' textLength='38' lengthAdjust='spacingAndGlyphs' font-family='Roboto,arial' font-size='12px' font-style='italic' font-weight='bold' style='fill:#cde'>.com</text></svg>
</div>
</a></div>

<div id="I_navsch">

<div id="I_navigation">
<ul>
<li><a href="/doc/">TUTORIALS</a></li>
<li><a href="/reference/">REFERENCE</a></li>
<li><a href="/articles/">ARTICLES</a></li>
<li><a href="/forum/">FORUM</a></li>
</ul>
</div>

<div id="I_search">

    <script async src="https://cse.google.com/cse.js?cx=partner-pub-7688470879129516:0646519325"></script>
    <div class="gcse-searchbox-only" enableAutoComplete="true" resultsUrl="'.$url_search.'"></div>

</div>

</div>
<div id="I_user" class="C_LoginBox" data-ajax="ajax"></div></div>
</div>

<div id="I_mid">

<div id="I_cols">

<div id="I_left">
<div id="I_nav">

<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder selected doc"><a href="/doc/">Tutorials</a></li><li class="folder reference"><a href="/reference/">Reference</a></li><li class="folder articles"><a href="/articles/">Articles</a></li><li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div><div class="C_BoxLabels C_BoxSort sect">
            <h3><b><a href="/doc/">Tutorials</a></b></h3>
            <ul><li class="selected folder">
            
            <a href="/doc/tutorial/" title="C++ Language">
            <span>C++ Language</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/ascii/" title="Ascii Codes">
            <span>Ascii Codes</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/boolean/" title="Boolean Operations">
            <span>Boolean Operations</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/hex/" title="Numerical Bases">
            <span>Numerical Bases</span>
            </a>
            </li>
</ul>
            </div><div class="C_BoxLabels C_BoxSort sect">
            <h3><b><a href="/doc/tutorial/">C++ Language</a></b></h3>
            <ul><li class="C_Collapsable"><h4>Introduction</h4><ul><li class="folder">
            
            <a href="/doc/tutorial/introduction/" title="Compilers">
            <span>Compilers</span>
            </a>
            </li>
</ul></li><li class="C_Collapsable"><h4>Basics of C++</h4><ul><li class="">
            
            <a href="/doc/tutorial/program_structure/" title="Structure of a program">
            <span>Structure of a program</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/variables/" title="Variables and types">
            <span>Variables and types</span>
            </a>
            </li>
<li class="selected">
            
            <a href="/doc/tutorial/constants/" title="Constants">
            <span>Constants</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/operators/" title="Operators">
            <span>Operators</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/basic_io/" title="Basic Input/Output">
            <span>Basic Input/Output</span>
            </a>
            </li>
</ul></li><li class="C_Collapsable"><h4>Program structure</h4><ul><li class="">
            
            <a href="/doc/tutorial/control/" title="Statements and flow control">
            <span>Statements and flow control</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/functions/" title="Functions">
            <span>Functions</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/functions2/" title="Overloads and templates">
            <span>Overloads and templates</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/namespaces/" title="Name visibility">
            <span>Name visibility</span>
            </a>
            </li>
</ul></li><li class="C_Collapsable"><h4>Compound data types</h4><ul><li class="">
            
            <a href="/doc/tutorial/arrays/" title="Arrays">
            <span>Arrays</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/ntcs/" title="Character sequences">
            <span>Character sequences</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/pointers/" title="Pointers">
            <span>Pointers</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/dynamic/" title="Dynamic memory">
            <span>Dynamic memory</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/structures/" title="Data structures">
            <span>Data structures</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/other_data_types/" title="Other data types">
            <span>Other data types</span>
            </a>
            </li>
</ul></li><li class="C_Collapsable"><h4>Classes</h4><ul><li class="">
            
            <a href="/doc/tutorial/classes/" title="Classes (I)">
            <span>Classes (I)</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/templates/" title="Classes (II)">
            <span>Classes (II)</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/classes2/" title="Special members">
            <span>Special members</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/inheritance/" title="Friendship and inheritance">
            <span>Friendship and inheritance</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/polymorphism/" title="Polymorphism">
            <span>Polymorphism</span>
            </a>
            </li>
</ul></li><li class="C_Collapsable"><h4>Other language features</h4><ul><li class="">
            
            <a href="/doc/tutorial/typecasting/" title="Type conversions">
            <span>Type conversions</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/exceptions/" title="Exceptions">
            <span>Exceptions</span>
            </a>
            </li>
<li class="">
            
            <a href="/doc/tutorial/preprocessor/" title="Preprocessor directives">
            <span>Preprocessor directives</span>
            </a>
            </li>
</ul></li><li class="C_Collapsable"><h4>Standard library</h4><ul><li class="">
            
            <a href="/doc/tutorial/files/" title="Input/output with files">
            <span>Input/output with files</span>
            </a>
            </li>
</ul></li></ul>
            </div><div id="I_subnav"></div></div>
</div>
<div id="I_main">

<div id="I_bar">
<div id="I_burger">
<svg focusable="false" viewBox="0 0 24 24"><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path></svg>
</div>
<ul>
<li><a href="/doc/">Tutorials</a></li>
<li><a href="/doc/tutorial/">C++ Language</a></li>
<li class="here">Constants</li>
</ul>
</div>
<div class="C_bn" style="width:100%">
    <!-- cplusplus_S2S_Leaderboard_ATF_ROS -->
    <style>
        @media only screen and (min-width: 0px) and (min-height: 0px) {
            div[id^="bsa-zone_1661765511757-3_123456"] {
                min-width: 300px;
                min-height: 50px;
            }
        }
        @media only screen and (min-width: 640px) and (min-height: 0px) {
            div[id^="bsa-zone_1661765511757-3_123456"] {
                min-width: 468px;
                min-height: 60px;
            }
        }
    </style>
    <div id="bsa-zone_1661765511757-3_123456"></div>
    </div>
<div id="I_content">
<div class="C_doc"><h1>Constants</h1>
<section id="constants">
<dfn>Constants</dfn> are expressions with a fixed value.<br>
</section>
<br>
<section id="literals">
<h3>Literals</h3>
Literals are the most obvious kind of constants. They are used to express particular values within the source code of a program. We have already used some in previous chapters to give specific values to variables or to express messages we wanted our programs to print out, for example, when we wrote:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br></code></pre></td>
<td class="source"><pre><code>a = 5;</code></pre></td>
</tr></table></div>
<br>
The <code>5</code> in this piece of code was a <i>literal constant</i>.<br>
<br>
Literal constants can be classified into: integer, floating-point, characters, strings, Boolean, pointers, and user-defined literals.<br>
</section>
<br>
<section id="integer">
<h4>Integer Numerals</h4>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code>1776
707
-</code></pre></td>
</tr></table></div>
<br>
These are numerical constants that identify integer values. Notice that they are not enclosed in quotes or any other special character; they are a simple succession of digits representing a whole number in decimal base; for example, <code>1776</code> always represents the value <i>one thousand seven hundred seventy-six</i>.<br>
<br>
In addition to decimal numbers (those that most of us use every day), C++ allows the use of octal numbers (base 8) and hexadecimal numbers (base 16) as literal constants. For octal literals, the digits are preceded with a <code>0</code> (zero) character. And for hexadecimal, they are preceded by the characters <code>0x</code> (zero, x). For example, the following literal constants are all equivalent to each other: <br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code>75         <cite>// decimal</cite>
0113       <cite>// octal</cite>
0x4b       <cite>// hexadecimal  </cite></code></pre></td>
</tr></table></div>
<br>
All of these represent the same number: 75 (seventy-five) expressed as a base-10 numeral, octal numeral and hexadecimal numeral, respectively. <br>
<br>
These literal constants have a type, just like variables. By default, integer literals are of type <code>int</code>. However, certain suffixes may be appended to an integer literal to specify a different integer type:<br>
<br>
<table class="boxed">
<tr><th>Suffix</th><th>Type modifier</th></tr>
<tr><td><code>u</code> <i>or</i> <code>U</code></td><td><code>unsigned</code></td></tr>
<tr><td><code>l</code> <i>or</i> <code>L</code></td><td><code>long</code></td></tr>
<tr><td><code>ll</code> <i>or</i> <code>LL</code></td><td><code>long long</code></td></tr>
</table>
<br>
Unsigned may be combined with any of the other two in any order to form <code>unsigned long</code> or <code>unsigned long long</code>.<br>
<br>
For example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code>75         <cite>// int</cite>
75u        <cite>// unsigned int</cite>
75l        <cite>// long</cite>
75ul       <cite>// unsigned long </cite>
75lu       <cite>// unsigned long </cite></code></pre></td>
</tr></table></div>
<br>
In all the cases above, the suffix can be specified using either upper or lowercase letters.<br>
</section>
<br>
<section id="floating">
<h4>Floating Point Numerals</h4>
They express real values, with decimals and/or exponents. They can include either a decimal point, an <code>e</code> character (that expresses <i>"by ten at the Xth height"</i>, where <i>X</i> is an integer value that follows the <code>e</code> character), or both a decimal point and an <code>e</code> character:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code>3.14159    <cite>// 3.14159</cite>
6.02e23    <cite>// 6.02 x 10^23</cite>
1.6e-19    <cite>// 1.6 x 10^-19</cite>
3.0        <cite>// 3.0  </cite></code></pre></td>
</tr></table></div>
<br>
These are four valid numbers with decimals expressed in C++. The first number is PI, the second one is the number of Avogadro, the third is the electric charge of an electron (an extremely small number) -all of them approximated-, and the last one is the number <i>three</i> expressed as a floating-point numeric literal.<br>
<br>
The default type for floating-point literals is <code>double</code>. Floating-point literals of type <code>float</code> or <code>long double</code> can be specified by adding one of the following suffixes:<br>
<br>
<table class="boxed">
<tr><th>Suffix</th><th>Type</th></tr>
<tr><td><code>f</code> <i>or</i> <code>F</code></td><td><code>float</code></td></tr>
<tr><td><code>l</code> <i>or</i> <code>L</code></td><td><code>long double</code></td></tr>
</table>
<br>
For example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>3.14159L   <cite>// long double</cite>
6.02e23f   <cite>// float  </cite></code></pre></td>
</tr></table></div>
<br>
Any of the letters that can be part of a floating-point numerical constant (<code>e</code>, <code>f</code>, <code>l</code>) can be written using either lower or uppercase letters with no difference in meaning.<br>
</section>
<br>
<section id="strings">
<h4>Character and string literals</h4>
Character and string literals are enclosed in quotes:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><kbd>'z'</kbd>
<kbd>'p'</kbd>
<kbd>"Hello world"</kbd>
<kbd>"How do you do?"</kbd></code></pre></td>
</tr></table></div>
<br>
The first two expressions represent <i>single-character literals</i>, and the following two represent <i>string literals</i> composed of several characters. Notice that to represent a single character, we enclose it between single quotes (<code>'</code>), and to express a string (which generally consists of more than one character), we enclose the characters between double quotes (<code>"</code>).<br>
<br>
Both single-character and string literals require quotation marks surrounding them to distinguish them from possible variable identifiers or reserved keywords. Notice the difference between these two expressions:<br>
<br>
<code>
x<br>
'x'<br>
</code>
<br>
Here, <code>x</code> alone would refer to an identifier, such as the name of a variable or a compound type, whereas <code>'x'</code> (enclosed within single quotation marks) would refer to the character literal <code>'x'</code> (the character that represents a lowercase <i>x</i> letter).<br>
<br>
Character and string literals can also represent special characters that are difficult or impossible to express otherwise in the source code of a program, like newline (<code>\n</code>) or tab (<code>\t</code>). These special characters are all of them preceded by a backslash character (<code>\</code>).<br>
<br>
Here you have a list of the single character escape codes: <br>
<br>
<table class="boxed">
<tr><th>Escape code</th><th>Description</th></tr>
<tr><td><code>\n</code></td><td>newline</td></tr>
<tr><td><code>\r</code></td><td>carriage return</td></tr>
<tr><td><code>\t</code></td><td>tab</td></tr>
<tr><td><code>\v</code></td><td>vertical tab</td></tr>
<tr><td><code>\b</code></td><td>backspace</td></tr>
<tr><td><code>\f</code></td><td>form feed (page feed)</td></tr>
<tr><td><code>\a</code></td><td>alert (beep)</td></tr>
<tr><td><code>\'</code></td><td>single quote (<code>'</code>)</td></tr>
<tr><td><code>\"</code></td><td>double quote (<code>"</code>)</td></tr>
<tr><td><code>\?</code></td><td>question mark (<code>?</code>)</td></tr>
<tr><td><code>\\</code></td><td>backslash (<code>\</code>)</td></tr>
</table>
<br>
For example:<br>
<br>
<code>
'\n'<br>
'\t'<br>
"Left \t Right"<br>
"one\ntwo\nthree"<br>
</code>
<br>
Internally, computers represent characters as numerical codes: most typically, they use one extension of the <a href="/ascii">ASCII</a> character encoding system (see <a href="/ascii">ASCII code</a> for more info). Characters can also be represented in literals using its numerical code by writing a backslash character (<code>\</code>) followed by the code expressed as an octal (base-8) or hexadecimal (base-16) number. For an octal value, the backslash is followed directly by the digits; while for hexadecimal, an <code>x</code> character is inserted between the backslash and the hexadecimal digits themselves (for example: <code>\x20</code> or <code>\x4A</code>).<br>
<br>
Several string literals can be concatenated to form a single string literal simply by separating them by one or more blank spaces, including tabs, newlines, and other valid blank characters. For example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><kbd>"this forms"</kbd> <kbd>"a single"</kbd>     <kbd>" string "</kbd>
<kbd>"of characters"</kbd></code></pre></td>
</tr></table></div>
<br>
The above is a string literal equivalent to:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br></code></pre></td>
<td class="source"><pre><code><kbd>"this formsa single string of characters"</kbd></code></pre></td>
</tr></table></div>
<br>
Note how spaces within the quotes are part of the literal, while those outside them are not.<br>
<br>
Some programmers also use a trick to include long string literals in multiple lines: In C++, a backslash (<code>\</code>) at the end of line is considered a <i>line-continuation</i> character that merges both that line and the next into a single line. Therefore the following code:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>x = <kbd>"string expressed in \
two lines"</kbd></code></pre></td>
</tr></table></div>
<br>
is equivalent to:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br></code></pre></td>
<td class="source"><pre><code>x = <kbd>"string expressed in two lines"</kbd></code></pre></td>
</tr></table></div>
<br>
All the character literals and string literals described above are made of characters of type <code>char</code>. A different character type can be specified by using one of the following prefixes:<br>
<br>
<table class="boxed">
<tr><th>Prefix</th><th>Character type</th></tr>
<tr><td><code>u</code></td><td><code>char16_t</code></td></tr>
<tr><td><code>U</code></td><td><code>char32_t</code></td></tr>
<tr><td><code>L</code></td><td><code>wchar_t</code></td></tr>
</table>
<br>
Note that, unlike type suffixes for integer literals, these prefixes are <i>case sensitive</i>: lowercase for <code>char16_t</code> and uppercase for <code>char32_t</code> and <code>wchar_t</code>.<br>
<br>
For string literals, apart from the above <code>u</code>, <code>U</code>, and <code>L</code>, two additional prefixes exist:<br>
<br>
<table class="boxed">
<tr><th>Prefix</th><th>Description</th></tr>
<tr><td><code>u8</code></td><td>The string literal is encoded in the executable using UTF-8</td></tr>
<tr><td><code>R</code></td><td>The string literal is a raw string</td></tr>
</table>
<br>
In raw strings, backslashes and single and double quotes are all valid characters; the content of the literal is delimited by an initial <code>R"<i>sequence</i>(</code> and a final <code>)<i>sequence</i>"</code>, where <code><i>sequence</i></code> is any sequence of characters (including an empty sequence). The content of the string is what lies inside the parenthesis, ignoring the delimiting sequence itself. For example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>R<kbd>"(string with \backslash)"</kbd>
R<kbd>"&amp;%$(string with \backslash)&amp;%$"</kbd></code></pre></td>
</tr></table></div>
<br>
Both strings above are equivalent to <code>"string with \\backslash"</code>. The <code>R</code> prefix can be combined with any other prefixes, such as <code>u</code>, <code>L</code> or <code>u8</code>.<br>
</section>
<br>
<section id="other">
<h4>Other literals</h4>
Three keyword literals exist in C++: <code>true</code>, <code>false</code> and <code>nullptr</code>:<br>
<ul>
<li><code>true</code> and <code>false</code> are the two possible values for variables of type <code>bool</code>.</li>
<li><code>nullptr</code> is the <i>null pointer</i> value.</li>
</ul>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><var>bool</var> foo = <var>true</var>;
<var>bool</var> bar = <var>false</var>;
<var>int</var>* p = <var>nullptr</var>;</code></pre></td>
</tr></table></div>
</section>
<br>
<section id="const">
<h3>Typed constant expressions</h3>
Sometimes, it is just convenient to give a name to a constant value:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code><var>const</var> <var>double</var> pi = 3.1415926;
<var>const</var> <var>char</var> tab = <kbd>'\t'</kbd>;</code></pre></td>
</tr></table></div>
<br>
We can then use these names instead of the literals they were defined to:<br>
<br>
<div class="auto C_CodeBox"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>const</var> <var>double</var> pi = 3.14159;
<var>const</var> <var>char</var> newline = <kbd>'\n'</kbd>;

<var>int</var> main ()
{
  <var>double</var> r=5.0;               <cite>// radius</cite>
  <var>double</var> circle;

  circle = 2 * pi * r;
  cout &lt;&lt; circle;
  cout &lt;&lt; newline;
}</code></pre></td>
<td class="output"><pre><samp>31.4159</samp></pre></td></tr></table></div>
</section>
<br>
<section id="define">
<h3>Preprocessor definitions (#define)</h3>
Another mechanism to name constant values is the use of preprocessor definitions. They have the following form:<br>
<br>
<code>#define identifier replacement</code> <br>
<br>
After this directive, any occurrence of <code>identifier</code> in the code is interpreted as <code>replacement</code>, where replacement is any sequence of characters (until the end of the line). This replacement is performed by the preprocessor, and happens before the program is compiled, thus causing a sort of blind replacement: the validity of the types or syntax involved is not checked in any way.<br>
<br>
For example:<br>
<div class="auto C_CodeBox"><table class="split"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br></code></pre></td>
<td class="source"><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<dfn>#define PI 3.14159</dfn>
<dfn>#define NEWLINE '\n'</dfn>

<var>int</var> main ()
{
  <var>double</var> r=5.0;               <cite>// radius</cite>
  <var>double</var> circle;

  circle = 2 * PI * r;
  cout &lt;&lt; circle;
  cout &lt;&lt; NEWLINE;

}</code></pre></td>
<td class="output"><pre><samp>31.4159</samp></pre></td></tr></table></div>
<br>
Note that the <code>#define</code> lines are preprocessor directives, and as such are single-line instructions that -unlike C++ statements- do not require semicolons (;) at the end; the directive extends automatically until the end of the line. If a semicolon is included in the line, it is part of the replacement sequence and is also included in all replaced occurrences.<br>
</section>
<table class="C_docPrevNext"><tr><td class="prev"><a href="/doc/tutorial/variables/" rel="prev"><img src="/ico/32arrowleft.png" width="32" height="32" alt="Previous">Previous:<br><b>Variables and types</b></a></td><td class="index"><a href="/doc/tutorial/" rel="index"><img src="/ico/32doc.png" width="32" height="32" alt="Index"><br>Index</a></td><td class="next"><a href="/doc/tutorial/operators/" rel="next"><img src="/ico/32arrowright.png" width="32" height="32" alt="Next">Next:<br><b>Operators</b></a></td></tr></table></div><div id="CH_bb"></div>
</div>
<div class="C_bn" style="width:100%">
    <!-- cplusplus_S2S_Leaderboard_BTF_ROS -->
    <style>
        @media only screen and (min-width: 0px) and (min-height: 0px) {
            div[id^="bsa-zone_1661765573868-8_123456"] {
                min-width: 300px;
                min-height: 50px;
            }
        }
        @media only screen and (min-width: 640px) and (min-height: 0px) {
            div[id^="bsa-zone_1661765573868-8_123456"] {
                min-width: 468px;
                min-height: 60px;
            }
        }
    </style>
    <div id="bsa-zone_1661765573868-8_123456"></div>
    </div></div>
<div id="I_midclear"></div>
</div>
</div>

<div id="I_bottom">
<div id="I_footer">
<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2022 - All rights reserved - <i>v3.3.4s</i>
<br><a href="/contact.do?referrer=%2Fdoc%2Ftutorial%2Fconstants%2F" rel="nofollow">Spotted an error? contact us</a>
</div>
</div>
</div>


<script type="text/javascript">
 cplusplus.onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth("su")) {
			
			el.appendChild(cplusplus.btn('Edit Page','Edit Page','edit','/doc/tutorial/constants/edit.do'));
			el.appendChild(cplusplus.btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/doc/tutorial/constants/delete.do'; }
cplusplus.ready();

var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>
